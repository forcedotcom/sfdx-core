version: 2.1
orbs:
  release-management: salesforce/npm-release-management@4

jobs:
  external-nut:
    description: Runs NUTs from other (external) repos by cloning them.  Substitutes a dependency for the current pull request.  For example, you're testing a PR to a library and want to test a plugin in another repo that uses the library.

    parameters:
      node_version:
        description: version of node to run tests against
        type: string
        default: 'latest'
      os:
        description: operating system to run tests on
        type: enum
        enum: ['linux', 'windows']
        default: 'linux'
      sfdx_version:
        description: 'By default, the latest version of the standalone CLI will be installed. To install via npm, supply a version tag such as "latest" or "6".'
        default: ''
        type: string
      sfdx_executable_path:
        description: "Path to sfdx executable to be used by NUTs, defaults to ''"
        default: ''
        type: string
      dependency_to_replace:
        description: 'The fully qualified npm module name, i.e. @salesforce/core, that will be replaced in the external NUTs.  Should match this project'
        type: string
        default: ''
      external_project_git_url:
        description: 'The url that will be cloned.  This contains the NUTs you want to run.  Ex: https://github.com/salesforcecli/plugin-user'
        type: string
        default: ''
      # repo_tag:
      #   description: "The tag of the module repo to checkout, '' defaults to branch/PR"
      #   default: ''
      #   type: string
      size:
        type: enum
        description: |
          The size of machine resource to use. Defaults to medium.
        default: medium
        enum:
          - medium
          - large
          - xlarge
          - 2xlarge

    executor:
      name: release-management/<< parameters.os >>
      size: << parameters.size >>

    environment:
      TESTKIT_EXECUTABLE_PATH: <<parameters.sfdx_executable_path>>

    steps:
      - release-management/install-node:
          version: <<parameters.node_version>>
          os: <<parameters.os>>
      - release-management/install-sfdx:
          version: <<parameters.sfdx_version>>
          os: <<parameters.os>>
      - run: git clone <<parameters.external_project_git_url>> $(pwd)
      # - when:
      #     condition:
      #       and:
      #         - equal: ['windows', <<parameters.os>>]
      #         - <<parameters.repo_tag>>
      #     steps:
      #       - run:
      #           name: Switch to tag v<<parameters.repo_tag>> or <<parameters.npm_module_name>>@<<parameters.repo_tag>>
      #           command: |
      #             git checkout "v<<parameters.repo_tag>>"
      #             if (!$?)
      #             {
      #               git checkout "<<parameters.npm_module_name>>@<<parameters.repo_tag>>"
      #             }
      # - when:
      #     condition:
      #       and:
      #         - equal: ['linux', <<parameters.os>>]
      #         - <<parameters.repo_tag>>
      #     steps:
      #       - run:
      #           name: Switch to tag v<<parameters.repo_tag>> or <<parameters.npm_module_name>>@<<parameters.repo_tag>>
      #           command: git checkout v<<parameters.repo_tag>> || git checkout <<parameters.npm_module_name>>@<<parameters.repo_tag>>
      - run:
          name: Install dependencies
          command: yarn
      - run:
          name: swap dependencies
          command: yarn remove <<parameters.dependency_to_replace>> && yarn add $CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME#$CIRCLE_SHA1
      # install and build in the core module
      - run:
          name: install/build core
          command: |
            yarn install
            yarn build
          working_directory: node_modules/<<parameters.dependency_to_replace>>
      - run:
          name: remove command/core
          command: rm -rf node_modules/\@salesforce/command/node_modules/\@salesforce/core
      - run:
          name: Build
          # deletes command/core to prevent ts conflicts
          command: |
            yarn build
      - release-management/verify-installed-plugin
      - run:
          name: set TESTKIT_ENABLE_ZIP for artifacts on linux
          command: |
            echo "export TESTKIT_ENABLE_ZIP=true" >> $BASH_ENV
      - run:
          name: Create artifact dir
          command: |
            mkdir artifacts
      - run:
          name: Nuts
          command: |
            echo "Using node: $(node --version)"
            echo "Environment Variables:"
            env
            yarn test:nuts
          # this is in the command instead of the circle project environment to prevent it from happening on windows
      - store_artifacts:
          path: artifacts

workflows:
  version: 2
  test-and-release:
    jobs:
      - external-nut:
          sfdx_version: latest
          os: linux
          node_version: lts
          dependency_to_replace: '@salesforce/core'
          external_project_git_url: 'https://github.com/salesforcecli/plugin-user'
      # - - release-management/test-nut:
      #     name: nuts-on-windows
      #     os: windows
      #     requires:
      #       - release-management/test-package
      # - release-management/validate-pr:
      #     filters:
      #       branches:
      #         ignore: main
      # - release-management/test-package:
      #     matrix:
      #       parameters:
      #         os:
      #           - linux
      #         node_version:
      #           - latest
      #           - lts
      #           - maintenance
      # - release-management/release-package:
      #     github-release: true
      #     post-job-steps:
      #       - run: yarn ci-docs
      #     requires:
      #       - release-management/test-package
      #     filters:
      #       branches:
      #         only: main
      #     context: CLI_CTC
