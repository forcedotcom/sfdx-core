version: 2.1
orbs:
  release-management: salesforce/npm-release-management@4

jobs:
  external-nut:
    description: Runs NUTs from other (external) repos by cloning them.  Substitutes a dependency for the current pull request.  For example, you're testing a PR to a library and want to test a plugin in another repo that uses the library.

    parameters:
      branch:
        type: string
        description: branch on external repo to clone
        default: 'main'
      test_command:
        type: string
        description: 'command to execute (ex: yarn test:nuts)'
        default: 'yarn test:nuts'
      node_version:
        description: version of node to run tests against
        type: string
        default: 'latest'
      os:
        description: operating system to run tests on
        type: enum
        enum: ['linux', 'windows']
        default: 'linux'
      sfdx_version:
        description: 'By default, the latest version of the standalone CLI will be installed. To install via npm, supply a version tag such as "latest" or "6".'
        default: ''
        type: string
      sfdx_executable_path:
        description: "Path to sfdx executable to be used by NUTs, defaults to ''"
        default: ''
        type: string
      external_project_git_url:
        description: 'The url that will be cloned.  This contains the NUTs you want to run.  Ex: https://github.com/salesforcecli/plugin-user'
        type: string
        default: ''
      size:
        type: enum
        description: |
          The size of machine resource to use. Defaults to medium.
        default: medium
        enum:
          - medium
          - large
          - xlarge
          - 2xlarge

    executor:
      name: release-management/<< parameters.os >>
      size: << parameters.size >>

    environment:
      TESTKIT_EXECUTABLE_PATH: <<parameters.sfdx_executable_path>>

    steps:
      - release-management/install-node:
          version: <<parameters.node_version>>
          os: <<parameters.os>>
      - release-management/install-sfdx:
          version: <<parameters.sfdx_version>>
          os: <<parameters.os>>
      - run: git clone <<parameters.external_project_git_url>> -b <<parameters.branch>>  $(pwd)
      - run:
          name: Install dependencies
          command: yarn
      - run:
          name: swap dependencies
          command: yarn remove @salesforce/core
      # windows/powershell does envs differently so we have to have conditional steps
      - when:
          condition:
            equal: ['windows', <<parameters.os>>]
          steps:
            - run: yarn add $env:CIRCLE_PROJECT_USERNAME/$env:CIRCLE_PROJECT_REPONAME#$env:CIRCLE_SHA1
      - when:
          condition:
            equal: ['linux', <<parameters.os>>]
          steps:
            - run: yarn add $CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME#$CIRCLE_SHA1
      - run:
          name: install/build this branch of sfdx-core
          command: |
            yarn install
            npm install shx -g
            shx rm -rf node_modules/@salesforce/kit
            yarn build
          working_directory: node_modules/@salesforce/core
      - run:
          name: remove sf-plugins-core/core
          # deletes sf-plugins-core/core to prevent ts conflicts
          command: shx rm -rf node_modules/@salesforce/sf-plugins-core/node_modules/@salesforce/core
      - run:
          name: build the external project
          command: |
            yarn build
      - when:
          condition:
            equal: ['linux', <<parameters.os>>]
          steps:
            - release-management/verify-installed-plugin
            - run:
                name: set TESTKIT_ENABLE_ZIP for artifacts on linux
                command: |
                  echo "export TESTKIT_ENABLE_ZIP=true" >> $BASH_ENV
            - run:
                name: Create artifact dir
                command: |
                  mkdir artifacts
      - run:
          name: Nuts
          command: <<parameters.test_command>>
      - when:
          condition:
            equal: ['linux', <<parameters.os>>]
          steps:
            # this is in the command instead of the circle project environment to prevent it from happening on windows
            - store_artifacts:
                path: artifacts

workflows:
  version: 2
  test-and-release:
    jobs:
      - release-management/validate-pr:
          filters:
            branches:
              ignore: v3
      - release-management/test-package:
          matrix:
            parameters:
              os:
                - linux
                - windows
              node_version:
                - latest
                - lts
                - maintenance
      - external-nut:
          filters:
            branches:
              ignore: v3
          requires:
            - release-management/test-package
          sfdx_version: latest
          node_version: lts
          matrix:
            parameters:
              os: [linux, windows]
              external_project_git_url:
                [
                  'https://github.com/salesforcecli/plugin-alias',
                  'https://github.com/salesforcecli/plugin-env',
                  'https://github.com/salesforcecli/plugin-login',
                ]
      - external-nut:
          filters:
            branches:
              ignore: v3
          requires:
            - release-management/test-package
          sfdx_version: latest
          branch: 'v2'
          node_version: lts
          matrix:
            parameters:
              os: [linux, windows]
              external_project_git_url: ['https://github.com/salesforcecli/plugin-config']
      - external-nut:
          filters:
            branches:
              ignore: v3
          requires:
            - release-management/test-package
          sfdx_version: latest
          size: xlarge
          node_version: lts
          matrix:
            parameters:
              os: [linux, windows]
              external_project_git_url: ['https://github.com/salesforcecli/plugin-deploy-retrieve']
              test_command:
                [
                  'yarn test:nuts:deploy:metadata:manifest',
                  'yarn test:nuts:deploy:metadata:metadata',
                  'yarn test:nuts:deploy:metadata:source-dir',
                  'yarn test:nuts:deploy:metadata:test-level',
                  'yarn test:nuts:static',
                ]
      - release-management/release-package:
          # TODO: add these back when we're ready to GA v3
          # github-release: true
          # post-job-steps:
          #   - run: yarn ci-docs
          tag: 'v3-beta'
          requires:
            - release-management/test-package
          filters:
            branches:
              only: v3
          context: CLI_CTC
