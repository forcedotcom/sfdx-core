/*
 * Copyright (c) 2021, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
import { expect } from 'chai';
import * as sinon from 'sinon';
import { stubMethod, stubInterface } from '@salesforce/ts-sinon';
// import { shouldThrow } from '../../src/testSetup';
import { SObject } from 'jsforce'; // RecordResult
import { Org } from '../../src/org';
import { Connection } from '../../src/connection';
import { AuthInfo } from '../../src/authInfo';
import { scratchOrgCreate, ScratchOrgCreateOptions } from '../../src/scratchOrgCreate';
import { SfdxProjectJson } from '../../src/sfdxProject';
import { Messages } from '../../src/messages';

Messages.importMessagesDirectory(__dirname);
// const messages = Messages.loadMessages('@salesforce/core', 'scratchOrgCreate');

const packageId = '05iB0000000cWwnIAE';
const packageVersionSubscriberId = '04tB0000000cWwnIAE';
const clientId = 'MyClientId';
// const badPackageId = '03iB0000000cWwnIAE';

describe('scratchOrgCreate', () => {
  const sandbox = sinon.createSandbox();
  // const connectionStub = sinon.createStubInstance(Connection);
  const hubOrgStub = sinon.createStubInstance(Org);
  const authInfoStub = sinon.createStubInstance(AuthInfo);
  const scratchOrgInfoId = '1234';
  // const privateKey = '12345';
  // const username = 'PlatformCLI';
  // const authInfo = 'my-auth-info';
  const retrieve = {
    Status: 'Active',
  };
  // const authInfo = 'my-auth-info';
  beforeEach(() => {
    stubInterface<SfdxProjectJson>(sandbox, {
      getPackageDirectories: () => [
        { path: 'foo', package: 'fooPkgName', versionNumber: '4.7.0.NEXT', ancestorId: packageId },
      ],
    });
    sandbox.stub(Connection, 'create').resolves();
    hubOrgStub.isDevHubOrg.returns(false);
    hubOrgStub.determineIfDevHubOrg.withArgs(true).resolves();
    hubOrgStub.getConnection.returns(Connection.prototype);
    hubOrgStub.getUsername.returns('sfdx-cli@salesforce.com');
    sandbox.stub(Org, 'create').resolves(hubOrgStub);
    authInfoStub.getFields.returns({
      instanceUrl: 'https://salesforce.com',
    });
    sandbox.stub(AuthInfo, 'create').resolves(authInfoStub);
    sandbox.stub(Connection.prototype, 'create').resolves();
    sandbox
      .stub(Connection.prototype, 'sobject')
      .withArgs('ScratchOrgInfo')
      .returns({
        create: sinon.stub().resolves({
          id: scratchOrgInfoId,
        }),
        retrieve: sinon.stub().withArgs(scratchOrgInfoId).resolves(retrieve),
      } as unknown as SObject<unknown>);
    // connectionStub.create.resolves(); // connectionStub as unknown as RecordResult
    // connectionStub.sobject.withArgs('ScratchOrgInfo').returns({
    //   create: sinon.stub().resolves({
    //     id: scratchOrgInfoId,
    //   }),
    //   retrieve: sinon.stub().withArgs(scratchOrgInfoId).resolves(retrieve),
    // } as unknown as SObject<unknown>);

    // console.log('sobject', connectionStub.tooling.sobject);
    // connectionStub.tooling.sobject = sinon.stub().returns({
      // update: sinon.spy(),
      // find: sinon.spy(),
      // eslint-disable-next-line @typescript-eslint/ban-types
    // }) as unknown as <T = object>(resource: string) => SObject<T>;
    // sandbox.stub(connectionStub, 'tooling').returns({
    //   sobject: sinon.stub().returns({
    //     update: sinon.spy(),
    //     find: sinon.spy(),
    //   }),
    // });
    // sandbox.stub(connectionStub.tooling, 'sobject').returns({
    //   update: sinon.spy(),
    //   find: sinon.spy(),
    // } as unknown as SObject<unknown>);
    // connectionStub.sobject.withArgs('SourceMember').returns({
    //   update: sinon.spy(),
    //   find: sinon.spy(),
    // } as unknown as SObject<unknown>);

    sandbox.stub(Connection.prototype, 'getAuthInfoFields').returns({
      clientId,
    });
    sandbox
      .stub(Connection.prototype, 'singleRecordQuery')
      .withArgs(`SELECT Id FROM Package2Version WHERE SubscriberPackageVersionId = '${packageVersionSubscriberId}'`, {
        tooling: true,
      })
      .resolves({ Id: packageId, IsReleased: true })
      .withArgs(
        `SELECT Id, IsReleased FROM Package2Version WHERE Package2Id = '${packageId}' AND MajorVersion = 4 AND MinorVersion = 0 AND PatchVersion = 0 and IsReleased = true`,
        {
          tooling: true,
        }
      )
      .resolves({ Id: packageId, IsReleased: true });

    sandbox.stub(Connection.prototype, 'tooling').get(() => ({
      sobject: sinon.stub().returns({
        update: sinon.spy(),
        find: sinon.spy(),
      }),
    }));

    // connectionStub.getAuthInfoFields.returns({
    //   clientId,
    // });
    // connectionStub.singleRecordQuery
    //   .withArgs(`SELECT Id FROM Package2Version WHERE SubscriberPackageVersionId = '${packageVersionSubscriberId}'`, {
    //     tooling: true,
    //   })
    //   .resolves({ Id: packageId, IsReleased: true })
    //   .withArgs(
    //     `SELECT Id, IsReleased FROM Package2Version WHERE Package2Id = '${packageId}' AND MajorVersion = 4 AND MinorVersion = 0 AND PatchVersion = 0 and IsReleased = true`,
    //     {
    //       tooling: true,
    //     }
    //   )
    //   .resolves({ Id: packageId, IsReleased: true });

    stubMethod(sandbox, Org.prototype, 'getConnection').returns(Connection.prototype);
  });
  afterEach(() => {
    sandbox.restore();
  });

  it('scratchOrgCreate happy path', async () => {
    const scratchOrgCreateOptions = {
      hubOrg: hubOrgStub,
    } as ScratchOrgCreateOptions;
    const scratchOrgCreateResult = await scratchOrgCreate(scratchOrgCreateOptions);
    // expect(scratchOrgCreateResult).to.deep.equal({});
    expect(scratchOrgCreateResult).to.be.true;
  });
});
